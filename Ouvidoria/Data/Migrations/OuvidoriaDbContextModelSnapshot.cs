// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ouvidoria.Data;

namespace Ouvidoria.Data.Migrations
{
    [DbContext(typeof(OuvidoriaDbContext))]
    partial class OuvidoriaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ouvidoria.Models.Manifestacao", b =>
                {
                    b.Property<long>("ManifestacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CadastradoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Curso")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Detalhe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("PerfilId")
                        .HasColumnType("bigint");

                    b.Property<long>("SetorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("TipoSolicitacaoId")
                        .HasColumnType("bigint");

                    b.HasKey("ManifestacaoId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("SetorId");

                    b.HasIndex("TipoSolicitacaoId");

                    b.ToTable("Manifestacoes");

                    b.HasData(
                        new
                        {
                            ManifestacaoId = 1L,
                            Assunto = "Grande Disponibilidade de Livros",
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(9187),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(9183),
                            Campus = "UGB-VR",
                            Celular = "(24)99922-5355",
                            Detalhe = "É a maior e melhor biblioteca que vi entre as 3 unidades",
                            Email = "guilherme.rigon1988@gmail.com",
                            Nome = "Guilherme Luiz Simões Rigon",
                            PerfilId = 1L,
                            SetorId = 1L,
                            Telefone = "(24)3350-4146",
                            TipoSolicitacaoId = 1L
                        },
                        new
                        {
                            ManifestacaoId = 2L,
                            Assunto = "Mensalidade",
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 755, DateTimeKind.Local).AddTicks(1491),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 755, DateTimeKind.Local).AddTicks(1486),
                            Campus = "UGB-VR",
                            Celular = "(24)99922-5355",
                            Detalhe = "Permitir débito em conta.",
                            Email = "joao@joao.com",
                            Nome = "João Figueiredo",
                            PerfilId = 2L,
                            SetorId = 3L,
                            Telefone = "(24)3350-4146",
                            TipoSolicitacaoId = 3L
                        });
                });

            modelBuilder.Entity("Ouvidoria.Models.Perfil", b =>
                {
                    b.Property<long>("PerfilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CadastradoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PerfilId");

                    b.ToTable("Perfis");

                    b.HasData(
                        new
                        {
                            PerfilId = 1L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(3585),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 752, DateTimeKind.Local).AddTicks(3274),
                            Nome = "Aluno"
                        },
                        new
                        {
                            PerfilId = 2L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4613),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4598),
                            Nome = "Pais de Aluno"
                        },
                        new
                        {
                            PerfilId = 3L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4642),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4640),
                            Nome = "Professor"
                        },
                        new
                        {
                            PerfilId = 4L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4644),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4643),
                            Nome = "Funcionário"
                        },
                        new
                        {
                            PerfilId = 5L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4647),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 753, DateTimeKind.Local).AddTicks(4646),
                            Nome = "Visitante"
                        });
                });

            modelBuilder.Entity("Ouvidoria.Models.Resposta", b =>
                {
                    b.Property<long>("RespostaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CadastradoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CaminhoAnexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Conteudo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<long>("ManifestacaoId")
                        .HasColumnType("bigint");

                    b.HasKey("RespostaId");

                    b.HasIndex("ManifestacaoId")
                        .IsUnique();

                    b.ToTable("Respostas");
                });

            modelBuilder.Entity("Ouvidoria.Models.Setor", b =>
                {
                    b.Property<long>("SetorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CadastradoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("SetorId");

                    b.ToTable("Setores");

                    b.HasData(
                        new
                        {
                            SetorId = 1L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7779),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7774),
                            Email = "biblioteca@gmail.com",
                            Nome = "Biblioteca"
                        },
                        new
                        {
                            SetorId = 2L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(8671),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(8666),
                            Email = "centroatendimento@gmail.com",
                            Nome = "Centro de Atendimento"
                        },
                        new
                        {
                            SetorId = 3L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(8714),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(8713),
                            Email = "financeiro@gmail.com",
                            Nome = "Financeiro"
                        });
                });

            modelBuilder.Entity("Ouvidoria.Models.TipoSolicitacao", b =>
                {
                    b.Property<long>("TipoSolicitacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AtualizadoEm")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CadastradoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TipoSolicitacaoId");

                    b.ToTable("TiposSolicitacao");

                    b.HasData(
                        new
                        {
                            TipoSolicitacaoId = 1L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(6671),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(6659),
                            Nome = "Elogio"
                        },
                        new
                        {
                            TipoSolicitacaoId = 2L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7299),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7294),
                            Nome = "Reclamação"
                        },
                        new
                        {
                            TipoSolicitacaoId = 3L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7318),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7317),
                            Nome = "Sugestão"
                        },
                        new
                        {
                            TipoSolicitacaoId = 4L,
                            AtualizadoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7320),
                            CadastradoEm = new DateTime(2021, 3, 6, 19, 6, 2, 754, DateTimeKind.Local).AddTicks(7319),
                            Nome = "Outro"
                        });
                });

            modelBuilder.Entity("Ouvidoria.Models.Manifestacao", b =>
                {
                    b.HasOne("Ouvidoria.Models.Perfil", "Perfil")
                        .WithMany("Manifestacoes")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ouvidoria.Models.Setor", "Setor")
                        .WithMany("Manifestacoes")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ouvidoria.Models.TipoSolicitacao", "TipoSolicitacao")
                        .WithMany("Manifestacoes")
                        .HasForeignKey("TipoSolicitacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Setor");

                    b.Navigation("TipoSolicitacao");
                });

            modelBuilder.Entity("Ouvidoria.Models.Resposta", b =>
                {
                    b.HasOne("Ouvidoria.Models.Manifestacao", "Manifestacao")
                        .WithOne("Resposta")
                        .HasForeignKey("Ouvidoria.Models.Resposta", "ManifestacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifestacao");
                });

            modelBuilder.Entity("Ouvidoria.Models.Manifestacao", b =>
                {
                    b.Navigation("Resposta");
                });

            modelBuilder.Entity("Ouvidoria.Models.Perfil", b =>
                {
                    b.Navigation("Manifestacoes");
                });

            modelBuilder.Entity("Ouvidoria.Models.Setor", b =>
                {
                    b.Navigation("Manifestacoes");
                });

            modelBuilder.Entity("Ouvidoria.Models.TipoSolicitacao", b =>
                {
                    b.Navigation("Manifestacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
